/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StorkdLocal_H
#define StorkdLocal_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "storkd_types.h"

namespace stork { namespace thrift {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class StorkdLocalIf {
 public:
  virtual ~StorkdLocalIf() {}
  virtual void joinSwarm(SwarmId& _return, const std::string& swarmUri) = 0;
  virtual void leaveSwarm(const SwarmId& swarmId) = 0;
};

class StorkdLocalIfFactory {
 public:
  typedef StorkdLocalIf Handler;

  virtual ~StorkdLocalIfFactory() {}

  virtual StorkdLocalIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(StorkdLocalIf* /* handler */) = 0;
};

class StorkdLocalIfSingletonFactory : virtual public StorkdLocalIfFactory {
 public:
  StorkdLocalIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<StorkdLocalIf>& iface) : iface_(iface) {}
  virtual ~StorkdLocalIfSingletonFactory() {}

  virtual StorkdLocalIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(StorkdLocalIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<StorkdLocalIf> iface_;
};

class StorkdLocalNull : virtual public StorkdLocalIf {
 public:
  virtual ~StorkdLocalNull() {}
  void joinSwarm(SwarmId& /* _return */, const std::string& /* swarmUri */) {
    return;
  }
  void leaveSwarm(const SwarmId& /* swarmId */) {
    return;
  }
};

typedef struct _StorkdLocal_joinSwarm_args__isset {
  _StorkdLocal_joinSwarm_args__isset() : swarmUri(false) {}
  bool swarmUri :1;
} _StorkdLocal_joinSwarm_args__isset;

class StorkdLocal_joinSwarm_args {
 public:

  StorkdLocal_joinSwarm_args(const StorkdLocal_joinSwarm_args&);
  StorkdLocal_joinSwarm_args& operator=(const StorkdLocal_joinSwarm_args&);
  StorkdLocal_joinSwarm_args() : swarmUri() {
  }

  virtual ~StorkdLocal_joinSwarm_args() throw();
  std::string swarmUri;

  _StorkdLocal_joinSwarm_args__isset __isset;

  void __set_swarmUri(const std::string& val);

  bool operator == (const StorkdLocal_joinSwarm_args & rhs) const
  {
    if (!(swarmUri == rhs.swarmUri))
      return false;
    return true;
  }
  bool operator != (const StorkdLocal_joinSwarm_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorkdLocal_joinSwarm_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorkdLocal_joinSwarm_pargs {
 public:


  virtual ~StorkdLocal_joinSwarm_pargs() throw();
  const std::string* swarmUri;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorkdLocal_joinSwarm_result__isset {
  _StorkdLocal_joinSwarm_result__isset() : success(false), join(false) {}
  bool success :1;
  bool join :1;
} _StorkdLocal_joinSwarm_result__isset;

class StorkdLocal_joinSwarm_result {
 public:

  StorkdLocal_joinSwarm_result(const StorkdLocal_joinSwarm_result&);
  StorkdLocal_joinSwarm_result& operator=(const StorkdLocal_joinSwarm_result&);
  StorkdLocal_joinSwarm_result() {
  }

  virtual ~StorkdLocal_joinSwarm_result() throw();
  SwarmId success;
  SwarmJoinException join;

  _StorkdLocal_joinSwarm_result__isset __isset;

  void __set_success(const SwarmId& val);

  void __set_join(const SwarmJoinException& val);

  bool operator == (const StorkdLocal_joinSwarm_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(join == rhs.join))
      return false;
    return true;
  }
  bool operator != (const StorkdLocal_joinSwarm_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorkdLocal_joinSwarm_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorkdLocal_joinSwarm_presult__isset {
  _StorkdLocal_joinSwarm_presult__isset() : success(false), join(false) {}
  bool success :1;
  bool join :1;
} _StorkdLocal_joinSwarm_presult__isset;

class StorkdLocal_joinSwarm_presult {
 public:


  virtual ~StorkdLocal_joinSwarm_presult() throw();
  SwarmId* success;
  SwarmJoinException join;

  _StorkdLocal_joinSwarm_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorkdLocal_leaveSwarm_args__isset {
  _StorkdLocal_leaveSwarm_args__isset() : swarmId(false) {}
  bool swarmId :1;
} _StorkdLocal_leaveSwarm_args__isset;

class StorkdLocal_leaveSwarm_args {
 public:

  StorkdLocal_leaveSwarm_args(const StorkdLocal_leaveSwarm_args&);
  StorkdLocal_leaveSwarm_args& operator=(const StorkdLocal_leaveSwarm_args&);
  StorkdLocal_leaveSwarm_args() {
  }

  virtual ~StorkdLocal_leaveSwarm_args() throw();
  SwarmId swarmId;

  _StorkdLocal_leaveSwarm_args__isset __isset;

  void __set_swarmId(const SwarmId& val);

  bool operator == (const StorkdLocal_leaveSwarm_args & rhs) const
  {
    if (!(swarmId == rhs.swarmId))
      return false;
    return true;
  }
  bool operator != (const StorkdLocal_leaveSwarm_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorkdLocal_leaveSwarm_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorkdLocal_leaveSwarm_pargs {
 public:


  virtual ~StorkdLocal_leaveSwarm_pargs() throw();
  const SwarmId* swarmId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorkdLocal_leaveSwarm_result__isset {
  _StorkdLocal_leaveSwarm_result__isset() : leave(false) {}
  bool leave :1;
} _StorkdLocal_leaveSwarm_result__isset;

class StorkdLocal_leaveSwarm_result {
 public:

  StorkdLocal_leaveSwarm_result(const StorkdLocal_leaveSwarm_result&);
  StorkdLocal_leaveSwarm_result& operator=(const StorkdLocal_leaveSwarm_result&);
  StorkdLocal_leaveSwarm_result() {
  }

  virtual ~StorkdLocal_leaveSwarm_result() throw();
  SwarmLeaveException leave;

  _StorkdLocal_leaveSwarm_result__isset __isset;

  void __set_leave(const SwarmLeaveException& val);

  bool operator == (const StorkdLocal_leaveSwarm_result & rhs) const
  {
    if (!(leave == rhs.leave))
      return false;
    return true;
  }
  bool operator != (const StorkdLocal_leaveSwarm_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorkdLocal_leaveSwarm_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorkdLocal_leaveSwarm_presult__isset {
  _StorkdLocal_leaveSwarm_presult__isset() : leave(false) {}
  bool leave :1;
} _StorkdLocal_leaveSwarm_presult__isset;

class StorkdLocal_leaveSwarm_presult {
 public:


  virtual ~StorkdLocal_leaveSwarm_presult() throw();
  SwarmLeaveException leave;

  _StorkdLocal_leaveSwarm_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class StorkdLocalClient : virtual public StorkdLocalIf {
 public:
  StorkdLocalClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  StorkdLocalClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void joinSwarm(SwarmId& _return, const std::string& swarmUri);
  void send_joinSwarm(const std::string& swarmUri);
  void recv_joinSwarm(SwarmId& _return);
  void leaveSwarm(const SwarmId& swarmId);
  void send_leaveSwarm(const SwarmId& swarmId);
  void recv_leaveSwarm();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class StorkdLocalProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<StorkdLocalIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (StorkdLocalProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_joinSwarm(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_leaveSwarm(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  StorkdLocalProcessor(::apache::thrift::stdcxx::shared_ptr<StorkdLocalIf> iface) :
    iface_(iface) {
    processMap_["joinSwarm"] = &StorkdLocalProcessor::process_joinSwarm;
    processMap_["leaveSwarm"] = &StorkdLocalProcessor::process_leaveSwarm;
  }

  virtual ~StorkdLocalProcessor() {}
};

class StorkdLocalProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  StorkdLocalProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< StorkdLocalIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< StorkdLocalIfFactory > handlerFactory_;
};

class StorkdLocalMultiface : virtual public StorkdLocalIf {
 public:
  StorkdLocalMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<StorkdLocalIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~StorkdLocalMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<StorkdLocalIf> > ifaces_;
  StorkdLocalMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<StorkdLocalIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void joinSwarm(SwarmId& _return, const std::string& swarmUri) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->joinSwarm(_return, swarmUri);
    }
    ifaces_[i]->joinSwarm(_return, swarmUri);
    return;
  }

  void leaveSwarm(const SwarmId& swarmId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->leaveSwarm(swarmId);
    }
    ifaces_[i]->leaveSwarm(swarmId);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class StorkdLocalConcurrentClient : virtual public StorkdLocalIf {
 public:
  StorkdLocalConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  StorkdLocalConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void joinSwarm(SwarmId& _return, const std::string& swarmUri);
  int32_t send_joinSwarm(const std::string& swarmUri);
  void recv_joinSwarm(SwarmId& _return, const int32_t seqid);
  void leaveSwarm(const SwarmId& swarmId);
  int32_t send_leaveSwarm(const SwarmId& swarmId);
  void recv_leaveSwarm(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
