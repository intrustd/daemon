/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storkd_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace stork { namespace thrift {


SwarmJoinException::~SwarmJoinException() throw() {
}


void SwarmJoinException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const SwarmJoinException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SwarmJoinException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SwarmJoinException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SwarmJoinException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SwarmJoinException &a, SwarmJoinException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

SwarmJoinException::SwarmJoinException(const SwarmJoinException& other0) : TException() {
  message = other0.message;
  __isset = other0.__isset;
}
SwarmJoinException& SwarmJoinException::operator=(const SwarmJoinException& other1) {
  message = other1.message;
  __isset = other1.__isset;
  return *this;
}
void SwarmJoinException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SwarmJoinException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* SwarmJoinException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: SwarmJoinException";
  }
}


SwarmLeaveException::~SwarmLeaveException() throw() {
}


void SwarmLeaveException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const SwarmLeaveException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SwarmLeaveException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SwarmLeaveException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SwarmLeaveException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SwarmLeaveException &a, SwarmLeaveException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

SwarmLeaveException::SwarmLeaveException(const SwarmLeaveException& other2) : TException() {
  message = other2.message;
  __isset = other2.__isset;
}
SwarmLeaveException& SwarmLeaveException::operator=(const SwarmLeaveException& other3) {
  message = other3.message;
  __isset = other3.__isset;
  return *this;
}
void SwarmLeaveException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SwarmLeaveException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* SwarmLeaveException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: SwarmLeaveException";
  }
}


SwarmId::~SwarmId() throw() {
}


void SwarmId::__set_swarmId(const std::string& val) {
  this->swarmId = val;
}
std::ostream& operator<<(std::ostream& out, const SwarmId& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SwarmId::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->swarmId);
          this->__isset.swarmId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SwarmId::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SwarmId");

  xfer += oprot->writeFieldBegin("swarmId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->swarmId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SwarmId &a, SwarmId &b) {
  using ::std::swap;
  swap(a.swarmId, b.swarmId);
  swap(a.__isset, b.__isset);
}

SwarmId::SwarmId(const SwarmId& other4) {
  swarmId = other4.swarmId;
  __isset = other4.__isset;
}
SwarmId& SwarmId::operator=(const SwarmId& other5) {
  swarmId = other5.swarmId;
  __isset = other5.__isset;
  return *this;
}
void SwarmId::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SwarmId(";
  out << "swarmId=" << to_string(swarmId);
  out << ")";
}

}} // namespace
