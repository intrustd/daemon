/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storkd_TYPES_H
#define storkd_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace stork { namespace thrift {

class SwarmJoinException;

class SwarmLeaveException;

class SwarmId;

typedef struct _SwarmJoinException__isset {
  _SwarmJoinException__isset() : message(false) {}
  bool message :1;
} _SwarmJoinException__isset;

class SwarmJoinException : public ::apache::thrift::TException {
 public:

  SwarmJoinException(const SwarmJoinException&);
  SwarmJoinException& operator=(const SwarmJoinException&);
  SwarmJoinException() : message() {
  }

  virtual ~SwarmJoinException() throw();
  std::string message;

  _SwarmJoinException__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const SwarmJoinException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const SwarmJoinException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SwarmJoinException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(SwarmJoinException &a, SwarmJoinException &b);

std::ostream& operator<<(std::ostream& out, const SwarmJoinException& obj);

typedef struct _SwarmLeaveException__isset {
  _SwarmLeaveException__isset() : message(false) {}
  bool message :1;
} _SwarmLeaveException__isset;

class SwarmLeaveException : public ::apache::thrift::TException {
 public:

  SwarmLeaveException(const SwarmLeaveException&);
  SwarmLeaveException& operator=(const SwarmLeaveException&);
  SwarmLeaveException() : message() {
  }

  virtual ~SwarmLeaveException() throw();
  std::string message;

  _SwarmLeaveException__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const SwarmLeaveException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const SwarmLeaveException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SwarmLeaveException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(SwarmLeaveException &a, SwarmLeaveException &b);

std::ostream& operator<<(std::ostream& out, const SwarmLeaveException& obj);

typedef struct _SwarmId__isset {
  _SwarmId__isset() : swarmId(false) {}
  bool swarmId :1;
} _SwarmId__isset;

class SwarmId : public virtual ::apache::thrift::TBase {
 public:

  SwarmId(const SwarmId&);
  SwarmId& operator=(const SwarmId&);
  SwarmId() : swarmId() {
  }

  virtual ~SwarmId() throw();
  std::string swarmId;

  _SwarmId__isset __isset;

  void __set_swarmId(const std::string& val);

  bool operator == (const SwarmId & rhs) const
  {
    if (!(swarmId == rhs.swarmId))
      return false;
    return true;
  }
  bool operator != (const SwarmId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SwarmId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SwarmId &a, SwarmId &b);

std::ostream& operator<<(std::ostream& out, const SwarmId& obj);

}} // namespace

#endif
